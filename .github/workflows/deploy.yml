name: Build and Deploy Azure Functions App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './function_app'
  PYTHON_VERSION: '3.11'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        
        # Validate requirements.txt exists
        if [ ! -f "../requirements.txt" ]; then
          echo "‚ùå requirements.txt not found in project root"
          exit 1
        fi
        
        echo "üîç Installing project dependencies..."
        python -m pip install --upgrade pip
        pip install -r ../requirements.txt
        
        # Verify key dependencies are installed
        echo "üîç Verifying Azure Functions dependencies..."
        python -c "import azure.functions" && echo "‚úÖ azure-functions installed"
        python -c "import azure.cosmos" && echo "‚úÖ azure-cosmos installed" || echo "‚ö†Ô∏è  azure-cosmos not found (may use mocks)"
        
        echo "‚úÖ Dependencies resolved successfully"
        popd

    - name: 'Lint Python Code'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        # Validate Python syntax for all function files
        echo "üîç Validating Python syntax..."
        
        # Check main __init__.py if it exists
        if [ -f "__init__.py" ]; then
          python -m py_compile __init__.py
          echo "‚úÖ Main __init__.py syntax valid"
        fi
        
        # Check each function directory
        for func_dir in */; do
          if [ -f "${func_dir}__init__.py" ]; then
            echo "üîç Checking ${func_dir}__init__.py"
            python -m py_compile "${func_dir}__init__.py"
            echo "‚úÖ ${func_dir}__init__.py syntax valid"
          fi
        done
        
        # Check shared code if it exists
        if [ -d "shared_code" ] && [ -f "shared_code/__init__.py" ]; then
          python -m py_compile shared_code/__init__.py
          echo "‚úÖ shared_code/__init__.py syntax valid"
        fi
        
        echo "‚úÖ All Python syntax validation passed"
        popd

    - name: 'Run Unit Tests'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        # Add unit tests here when available
        echo "‚úÖ Unit test placeholder - tests would run here"
        echo "üìù Note: Add pytest and actual tests for production use"
        popd

    - name: 'Validate Infrastructure Templates'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        echo "üîç Validating Azure Functions configuration..."
        
        # Validate host.json
        if [ -f "host.json" ]; then
          python -c "import json; json.load(open('host.json'))"
          echo "‚úÖ host.json is valid JSON"
        fi
        
        # Validate function.json files
        for func_dir in */; do
          if [ -f "${func_dir}function.json" ]; then
            echo "üîç Validating ${func_dir}function.json"
            python -c "import json; json.load(open('${func_dir}function.json'))"
            echo "‚úÖ ${func_dir}function.json is valid JSON"
          fi
        done
        
        # Check for local.settings.json.example
        if [ -f "local.settings.json.example" ]; then
          python -c "import json; json.load(open('local.settings.json.example'))"
          echo "‚úÖ local.settings.json.example is valid JSON"
        fi
        
        echo "‚úÖ Azure Functions configuration validation passed"
        popd
        
        echo "üìù Note: Add 'az bicep build' validation for production use"

    - name: 'Upload Function App Package'
      uses: actions/upload-artifact@v4
      with:
        name: function-app-package
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: 'Build Summary'
      shell: bash
      run: |
        echo "üéâ Build completed successfully!"
        echo "üì¶ Function app package created and uploaded as artifact"
        echo "üîß Ready for deployment (requires Azure credentials)"

  check-deployment-readiness:
    runs-on: ubuntu-latest
    outputs:
      can-deploy: ${{ steps.check.outputs.can-deploy }}
    
    steps:
    - name: 'Check for Azure Credentials'
      id: check
      shell: bash
      run: |
        if [ -n "${{ secrets.AZURE_CREDENTIALS }}" ] && [ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
          echo "can-deploy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Azure credentials available - deployment will proceed"
        else
          echo "can-deploy=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  Azure credentials not configured - skipping deployment"
          echo "üìù To enable deployment, configure these repository secrets:"
          echo "   - AZURE_CREDENTIALS"
          echo "   - AZURE_SUBSCRIPTION_ID" 
          echo "   - AZURE_RESOURCE_GROUP"
          echo "   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE"
        fi

  deploy-infrastructure:
    needs: [build-and-test, check-deployment-readiness]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.check-deployment-readiness.outputs.can-deploy == 'true'
    outputs:
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      functionAppUrl: ${{ steps.deploy.outputs.functionAppUrl }}
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Deploy Infrastructure'
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
        template: ./infrastructure/main.bicep
        parameters: |
          appName=userapp-${{ github.run_number }}
          environment=dev
        deploymentMode: Incremental

  deploy-function-app:
    needs: [build-and-test, deploy-infrastructure, check-deployment-readiness]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.check-deployment-readiness.outputs.can-deploy == 'true'
    
    steps:
    - name: 'Download Function App Package'
      uses: actions/download-artifact@v4
      with:
        name: function-app-package
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r ../requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Deploy Azure Functions'
      uses: Azure/functions-action@v1
      id: deploy-function
      with:
        app-name: ${{ needs.deploy-infrastructure.outputs.functionAppName }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        scm-do-build-during-deployment: false
        enable-oryx-build: false

  health-check:
    needs: [deploy-infrastructure, deploy-function-app, check-deployment-readiness]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.check-deployment-readiness.outputs.can-deploy == 'true'
    
    steps:
    - name: 'Wait for Function App to be ready'
      shell: bash
      run: |
        echo "Waiting 30 seconds for function app to be ready..."
        sleep 30

    - name: 'Health Check - GET /users'
      shell: bash
      run: |
        FUNCTION_URL="${{ needs.deploy-infrastructure.outputs.functionAppUrl }}"
        echo "Testing GET $FUNCTION_URL/api/users"
        
        # Test GET /users endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_URL/api/users")
        if [ $response -eq 200 ]; then
          echo "‚úÖ GET /users endpoint is healthy (HTTP $response)"
        else
          echo "‚ùå GET /users endpoint failed (HTTP $response)"
          exit 1
        fi

    - name: 'Health Check - POST /user'
      shell: bash
      run: |
        FUNCTION_URL="${{ needs.deploy-infrastructure.outputs.functionAppUrl }}"
        echo "Testing POST $FUNCTION_URL/api/user"
        
        # Test POST /user endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -X POST "$FUNCTION_URL/api/user" \
          -H "Content-Type: application/json" \
          -d '{"name": "GitHub Actions Test", "email": "test@github.com"}')
        
        if [ $response -eq 201 ]; then
          echo "‚úÖ POST /user endpoint is healthy (HTTP $response)"
        else
          echo "‚ùå POST /user endpoint failed (HTTP $response)"
          exit 1
        fi

    - name: 'Deployment Success Notification'
      if: success()
      shell: bash
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üì± Function App URL: ${{ needs.deploy-infrastructure.outputs.functionAppUrl }}"
        echo "üîó API Endpoints:"
        echo "   - GET  ${{ needs.deploy-infrastructure.outputs.functionAppUrl }}/api/users"
        echo "   - POST ${{ needs.deploy-infrastructure.outputs.functionAppUrl }}/api/user"

  cleanup-on-failure:
    needs: [deploy-infrastructure, deploy-function-app, health-check, check-deployment-readiness]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main' && needs.check-deployment-readiness.outputs.can-deploy == 'true'
    
    steps:
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Cleanup Failed Deployment'
      shell: bash
      run: |
        echo "‚ö†Ô∏è Deployment failed. Consider cleaning up resources manually if needed."
        echo "Resource Group: ${{ secrets.AZURE_RESOURCE_GROUP }}" 